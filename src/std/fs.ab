import { match_regex, join, replace_regex, split } from "std/text"

/// Checks if a directory exists.
pub fun dir_exists(path) {
    $ [ -d "{path}" ] $ failed {
        return false
    }
    return true
}

/// Checks if a file exists.
pub fun file_exists(path) {
    $ [ -f "{path}" ] $ failed {
        return false
    }
    return true
}

/// Gets file contents from a path.
pub fun file_read(path) {
    return $ < "{path}" $?
}

/// Writes content to a file.
/// Doesn't check if the file exist
pub fun file_write(path, content) {
    return $ echo "{content}" > "{path}" $?
}

/// Appends content to a file.
///
/// Doesn't check if the file exists.
pub fun file_append(path, content) {
    return $ echo "{content}" >> "{path}" $?
}

/// Creates a symbolic link.
///
/// If the file doesn't exist, it returns a boolean and prints a message.
pub fun symlink_create(origin: Text, destination: Text): Bool {
    if file_exists(origin) {
        trust $ ln -s "{origin}" "{destination}" $
        return true
    }

    echo "The file {origin} doesn't exist!"
    return false
}

/// Creates a directory with all parent directories as required.
pub fun dir_create(path: Text): Null {
    if not dir_exists(path) {
        trust $ mkdir -p "{path}" $
    }
}

/// Determine whether mktemp is macOS's.
fun is_mac_os_mktemp(): Bool {
    // macOS's mktemp does not have --version
    silent $ mktemp --version $ failed {
        return true
    }
    return false
}

/// Create a temporary directory and return the path.
/// Please note this does not respect _CS_DARWIN_USER_TEMP_DIR environment variable.
pub fun temp_dir_create(
        template: Text = "tmp.XXXXXXXXXX",
        auto_delete: Bool = false,
        force_delete: Bool = false
    ): Text? {
    if template == "" {
        echo "The template cannot be an empty string!"
        fail 1
    }

    let filename = ""
    if is_mac_os_mktemp() {
        // usage: mktemp [-d] [-p tmpdir] [-q] [-t prefix] [-u] template ...
        //        mktemp [-d] [-p tmpdir] [-q] [-u] -t prefix
        filename = $ mktemp -d -p "\$TMPDIR" "{template}" $?
    } else {
        filename = $ mktemp -d -p "\$TMPDIR" -t "{template}" $?
    }
    if filename == "" {
        echo "Failed to make a temporary directory"
        fail 1
    }
    if auto_delete {
        if force_delete {
            $ trap 'rm -rf {filename}' EXIT $ failed {
                echo "Setting auto deletion fails. You must delete temporary dir {filename}."
            }
        } else {
            $ trap 'rmdir {filename}' EXIT $ failed {
                echo "Setting auto deletion fails. You must delete temporary dir {filename}."
            }
        }
    }
    return filename
}

/// Changes the permission bits of a file.
///
/// If the file doesn't exist, it returns `false` and prints a message.
pub fun file_chmod(path: Text, mode: Text): Bool {
    if file_exists(path) {
        trust $ chmod "{mode}" "{path}" $
        return true
    }

    echo "The file {path} doesn't exist!"
    return false
}

/// Changes the owner of a file.
///
/// If the file doesn't exist, it returns `false` and prints a message.
pub fun file_chown(path: Text, user: Text): Bool {
    if file_exists(path) or dir_exists(path) {
        trust $ chown -R "{user}" "{path}" $
        return true
    }

    echo "The file {path} doesn't exist!"
    return false
}

/// Escapes all characters in the passed-in glob except "*", "?" and "/",
/// to prevent injection attacks.
fun escape_non_glob_chars(path: Text): Text {
    return replace_regex(path, "\([^*?/]\)", "\\\\\1")
}

/// Finds all files or directories matching multiple file globs. When
/// we have union types, this functionality can be merged into the main
/// `glob` function.
pub fun file_glob_all(paths: [Text]): [Text]? {
    let combined = ""
    if len(paths) == 1 {
        combined = escape_non_glob_chars(paths[0])
    } else {
        let items = [Text]
        for item in paths {
            item = escape_non_glob_chars(item)
            items += [item]
        }
        combined = join(items, " ")
    }
    let files = $ eval "for file in {combined}; do [ -e \\\"\\\$file\\\" ] && echo \\\"\\\$file\\\"; done" $?
    return split(files, "\n")
}

/// Finds all files or directories matching a file glob.
pub fun file_glob(path: Text): [Text]? {
    return file_glob_all([path])?
}

/// Extract the file detecting from the filename the extension
/// Supports: bz2, gz, xz, bz2, deb, rar, rpm, tar(gz/xz/bz), zip(war/jar), 7z
/// Note: Not all the commands supports the output folder path
pub fun file_extract(path: Text, target: Text): Null? {
    if file_exists(path) {
        if {
            match_regex(path, "\.(tar\.bz2|tbz|tbz2)$", true): $ tar xvjf "{path}" -C "{target}" $?
            match_regex(path, "\.(tar\.gz|tgz)$", true): $ tar xzf "{path}" -C "{target}" $?
            match_regex(path, "\.(tar\.xz|txz)$", true): $ tar xJf "{path}" -C "{target}" $?
            match_regex(path, "\.bz2$"): $ bunzip2 "{path}" $?
            match_regex(path, "\.deb$"): $ dpkg-deb -xv "{path}" "{target}" $?
            match_regex(path, "\.gz$"): $ gunzip "{path}" $?
            match_regex(path, "\.rar$"): $ unrar x "{path}" "{target}" $?
            match_regex(path, "\.rpm$"): $ rpm2cpio "{path}" | cpio -idm $?
            match_regex(path, "\.tar$"): $ tar xf "{path}" -C "{target}" $?
            match_regex(path, "\.xz$"): $ xz --decompress "{path}" $?
            match_regex(path, "\.7z$"): $ 7z -y "{path}" -o "{target}" $?
            match_regex(path, "\.\(zip\|war\|jar\)$"): $ unzip "{path}" -d "{target}" $?
            else {
                echo "Error: Unsupported file type"
                fail 3
            }
        }
    } else {
        echo "Error: File not found"
        fail 2
    }
}
