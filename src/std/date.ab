/// All dates are internally stored as miliseconds since the Epoch (1970-01-01 00:00 UTC).

/// Transform date from unix epoch to a human-readable format described by a posix format string.
/// If no format is specified, "%F %T" is used.
/// For more info about format type "man date" in your shell or see <https://www.gnu.org/software/coreutils/date>.
///
/// Format includes the following patterns:
/// - `%%` - a literal %
/// - `%a` - locale's abbreviated weekday name (e.g., Sun)
/// - `%A` - locale's full weekday name (e.g., Sunday)
/// - `%b` - locale's abbreviated month name (e.g., Jan)
/// - `%B` - locale's full month name (e.g., January)
/// - `%d` - day of month (e.g., 01)
/// - `%D` - date; same as %m/%d/%y
/// - `%F` - full date; like %+4Y-%m-%d
/// - `%H` - hour (00..23)
/// - `%I` - hour (01..12)
/// - `%m` - month (01..12)
/// - `%M` - minute (00..59)
/// - `%N` - nanoseconds (000000000..999999999)
/// - `%p` - locale's equivalent of either AM or PM; blank if unknown
/// - `%T` - time; same as %H:%M:%S
/// - `%Y` - year
pub fun date_format_posix(date: Num, format: Text = "%F %T", utc: Bool = false): Text? {
    let utc_flag = utc then "-u" else ""
    // Case if this is a GNU date command
    return $ date {utc_flag} -d "@{date}" +"{format}" $ failed {
        // Case if this is a BSD date command
        return $ date {utc_flag} -j -r "{date}" +"{format}" $?
    }
}

/// Transforms date from a format described by a posix format string to a unix epoch format (seconds since the Epoch (1970-01-01 00:00 UTC)).
/// If no format is specified, "%F %T" format is used.
/// For more info about format type "man date" on your shell or go to <https://www.gnu.org/software/coreutils/date>.
#[allow_absurd_cast]
pub fun date_from_posix(date: Text, format: Text = "%F %T", utc: Bool = false): Num? {
    let utc_flag = utc then "-u" else ""
    // Case if this is a GNU date command
    return $ date {utc_flag} -d "\$(date -d "{date}" +"{format}")" +%s $ failed {
        // Case if this is a BSD date command
        return $ date {utc_flag} -j -f "{format}" "{date}" +%s $? as Num
    } as Num
}

/// Returns the current timestamp (seconds since the Epoch (1970-01-01 00:00 UTC)).
#[allow_absurd_cast]
pub fun date_now(): Num {
    return trust $ date +%s $ as Num
}

/// Adds a value to a date passed in the unix epoch format in miliseconds.
/// Example : `date_add(date, 3, "days")`
///
/// Available units:
/// - years
/// - months
/// - days
/// - hours
/// - minutes
/// - seconds
pub fun date_add(date: Num, amount: Num, unit: Text): Num? {
    if {
        unit == "years": return date + amount * 365 * 24 * 60 * 60
        unit == "months": return date + amount * 30 * 24 * 60 * 60
        unit == "days": return date + amount * 24 * 60 * 60
        unit == "hours": return date + amount * 60 * 60
        unit == "minutes": return date + amount * 60
        unit == "seconds": return date + amount
        else: fail 1
    }
}

/// Subtracts a value from a date passed in the unix epoch format in miliseconds.
/// Example : `date_sub(date, 5, "hours")`
///
/// Available units:
/// - years
/// - months
/// - days
/// - hours
/// - minutes
/// - seconds
pub fun date_sub(date: Num, amount: Num, unit: Text): Num? {
    if {
        unit == "years": return date - amount * 365 * 24 * 60 * 60
        unit == "months": return date - amount * 30 * 24 * 60 * 60
        unit == "days": return date - amount * 24 * 60 * 60
        unit == "hours": return date - amount * 60 * 60
        unit == "minutes": return date - amount * 60
        unit == "seconds": return date - amount
        else: fail 1
    }
}
